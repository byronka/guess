Objective:
----------
Write a program in Java to play a number-guessing game. 

The game works as follows:
--------------------------
The user chooses a number in his mind and types "ready" to indicate to
the computer that he is ready to begin playing.

The computer asks a series of questions to arrive at the number the
user has in mind. The user can only respond with "higher","lower" or
"yes".  The game ends when the user responds with "yes" or "end".

Example:
-------

User chooses number 40 in his mind.

Computer: Is the number 30?
User: higher
Computer: Is the number 50?
User: lower
Computer: Is the number 35?
User: higher
Computer: Is the number 40?
User: yes

Please note:
------------
1. The program should be written to arrive at the answer 
     asking the least number of questions.
2. Assume that your program will be used in the real 
     world, so make it robust, and make any reasonable 
     assumptions about the other conditions of the game.
3. Provide working source code; there should be a class 
     with a main method that we can run to play the game. 
     If necessary, provide a build script written in Ant, 
     Maven or Gradle.
4. Working unit tests would be a bonus.
5. You can include any explanatory notes with your program.

thoughts by Byron:
------------------

There is nothing in the requirements about the bounds for this number.
  That would mean we could allow negative numbers, 0, floating point,
  and very large numbers (12345678901234567890 for example). 
  
  We are *not* going to assume that kind of craziness is allowed.  If
  this was a real client, I would put this and other questions into an
  email for answer.  But that's not what I'm dealing with here - this
  is a code sample, so I'm going to go with what makes sense.

  .. hmm wait a second.  
  
  Maybe we can just double and halve and it will still work out.  For
  example, if the user chooses 1234567890, then the game will go like
  this:
  comp:(choosing a random number between 0 and 100) 20?
  user: higher!
  comp: 40?
  user: higher!
  comp: 80?
  user: higher!
  comp: 160?
  user: higher?
  ...
  and so on... 320, 640, 1280, 

  but that would take too long!  It would take maybe 27 queries
  (similar to 2^27) before we hit a number like 1234567890!!  Maybe if
  they keep saying, "higher", we'll speed up.
  comp: 20?
  user: higher!
  comp: (2x) 40?  (4x) 160? (8x) 1280? (16x) 20,480? (32x) 655,360?
  (64x) 41,943,040? (128x) 5,368,709,120?

  This only takes 7 tries, that's better! Now, we're doing something
  like this:

   answer <= 7           ; 7                            = 7 (start with a prime, as example)      = 2^0 * 7
   answer <= 2^1 * answer; 14                           = 2^1 * 7                                 = 2^1 * 7   (+1)
   answer <= 2^2 * answer; 56                           = 2^2 * 2^1 * 7                           = 2^3 * 7   (+2)
   answer <= 2^3 * answer; 8*56=448                     = 2^3 * 2^2 * 2^1 * 7                     = 2^6 * 7   (+3)
   answer <= 2^4 * answer; 16*448=7168                  = 2^4 * 2^3 * 2^2 * 2^1 * 7               = 2^10 * 7  (+4)
   answer <= 2^5 * answer; 32*7168=229376               = 2^5 * 2^4 * 2^3 * 2^2 * 2^1 * 7         = 2^15 * 7  (+5)
   answer <= 2^6 * answer; 64*229376=14680064           = 2^6 * 2^5 * 2^4 * 2^3 * 2^2 * 2^1 * 7   = 2^21 * 7  (+6)
   answer <= 2^7 * answer; 128*14680064=1879048192      =         ...                             = 2^28 * 7  (+7)
   answer <= 2^8 * answer; 256*1879048192=481036337152L =         ...                             = 2^36 * 7  (+8)

  Basically, what we have here is that with each iteration, we're
  augmenting the power by a series, 1, 2, 3, ...

  But we could do better.  We could augment by the Fibonacci series: 1, 2, 3, 5, 8, 13...

    = 2^0 * 7
    = 2^1 * 7   (+1)
    = 2^3 * 7   (+2)
    = 2^6 * 7   (+3)
    = 2^11 * 7  (+5)
    = 2^19 * 7  (+8)
    = 2^32 * 7  (+13)
    = 2^53 * 7  (+21)

  Hmm, we overshot the mark a bit.  We were aiming for 2^38 or so,
  and our acceleration is too high.  Maybe a simple unit increment
  series is fine! The key here is if the user is forced to keep
  saying, "higher," because they choose a very large number, or a
  rational number with a large denominator. Let's see about a way to
  get there faster without overshooting.

  One note: a user might, hilariously, choose their number to be
  1234567890, or negative 12345.  But, we *do* have to choose some
  realistic constraints, and I'm going to choose those to be the
  bounds of a 32-bit computer, and Java's 2's complement. Yes, we need
  to stay real-world, but I promise if I was playing this game, I'd
  personally quickly start playing with larger numbers.

  So:
   High-bound int: (2^31)-1
   Low-bound int: -(2^31)

  Know what? Forget the floating-point, it's a sinkhole.  We're
  going to keep this to integer.

  Let's test our strategy with some common cases:

  user chooses 16:
  comp: 10?
  user: higher
  comp: 20?
  user: lower
  comp: 15
  user: higher
  comp: 18?
  user: lower
  comp: 17?
  user: lower
  comp: 16?
  user: yes

  user chooses 123:
  comp: 23?
  user: higher
  comp: 46?
  user: higher
  comp: 184?
  user: lower
  comp: 92?
  user: higher
  comp: 138?
  user: lower
  comp: 115?
  user: higher
  comp: 126?
  user: lower
  comp: 121?
  user: higher
  comp: 123?
  user: yes

  user chooses 0:
  comp: 15?
  user: lower
  comp: 0?
  user: yes

  user chooses -123:
  comp: 17?
  user: lower
  comp: 0?
  user: lower
  comp: -34?
  user: lower
  comp: -119?
  user: lower
  comp: -1071?
  user: higher
  comp: -595?
  user: higher
  comp: -357?
  user: higher
  comp: -238?
  user: higher
  comp: -179
  user: higher

  Ok, two things are occuring to me at this point.  first off, do we
  *really* want to allow for insanely high numbers, like 2^27? And
  secondly, going negative just adds a lot of pain, little gain.

  So, a revision of the requirements: integers between 0 and 10,000
  and we'll keep the math simple - doubling and halving each time.

  user chooses 123:
  comp: 10?
  user: higher
  comp: 20?
  user: higher
  comp: 40?
  user: higher
  comp: 80?
  user: higher
  comp: 160?
  user: lower
  comp: 120?
  user: higher
  comp: 140?
  user: lower
  comp: 130?
  user: lower
  comp: 125?
  user: lower
  comp: 123?
  user: yes

  user chooses 0:
  comp: 10?
  user: lower
  comp: 5?
  user: lower
  comp: 3?
  user: lower
  comp: 2?
  user: lower
  comp: 1?
  user: lower
  comp: 0?
  user: yes

  user chooses -1:
  comp: please enter a value between 0 and 10,000)

  Actually, this reminds me, let's remove commas from the number the
  user enters before parsing it as an int.

  user chooses 10000:
  comp: 10?
  user: higher
  comp: 20?
  user: higher
  comp: 40?
  user: higher
  comp: 80?
  user: higher
  comp: 160?
  user: higher
  comp: 320?
  user: higher
  comp: 640?
  user: higher
  comp: 10000?
  user: yes

  This brings up another point.  If the user is at 10,000 and says
  "higher,", the computer should reply that 10,000 is the highest
  bound and maybe choose a different number.  Likewise, if the user
  says "lower" at 0, a similar message.

  Unfotunately, there are going to be certain values, like 1, or 9999,
  that will have a largest number of queries to obtain.  This will be
  somewhat allayed by the fact we'll randomize the first guess to be
  somewhere between 0 and 20, exclusive.

  Thinking about data structure / method signature
  --------------------------------------------------
  So far, we've been looking at a data structure that has three
  components - the min, max, and direction of next guess.

  Let's look at that data structure in action.
  (min, max, direction)
  
  user chooses 123: 
     randomly choose number between 1 and 19
  comp: 10? 
  user: higher 
     guessHigher (10, 20) -> 20
     -- this is where the algorithm is in scaling up mode.  It will double each time they say higher.
     -- guessHigher doubles the value
  comp: 20? 
  user: higher
     guessHigher (20, 40) -> 40
  comp: 40?
  user: higher
     guessHigher (40, 80) -> 80
  comp: 80?
  user: higher
     guessHigher (80, 160) -> 160
     -- guessHigher doubles the value
  comp: 160?
  user: lower
     guessLower (80, 160) -> 120
     -- this is where the algorithm switches to staying within bounds.
     -- guessLower gives midpoint between current guess (160) as upper bound and previous guess (80) as lower bound
  comp: 120?
  user: higher
     guessHigher (120, 160) -> 140
     -- guessHigher gives midpoint between current guess (120) as lower bound and previous upper bound (160) as upper bound
  comp: 140?
  user: lower
     guessLower (120, 140) -> 130
     -- guessLower gives midpoint between currentGuess (140) as upper bound and previous lower bound (120) as lower bound
  comp: 130?
  user: lower
     guessLower (120, 130) -> 125
     -- guessLower gives midpoint between current guess (130) as upper bound and previous lower bound (120) as lower bound
  comp: 125?
  user: lower
     guessLower (120, 125) -> 123
     -- guessLower gives midpoint between current guess (125) as upper bound and previous lower bound as lower bound (120)
  comp: 123?
  user: yes

  This brings up a point.  What is the user says "higher" 
  or "lower" when they meant the opposite? We need an "oops",
  to bring them back a step. Otherwise, they'll find themselves
  in the situation where the computer goes into the mode of narrowing
  down to a value in the wrong range.

  New Requirement: "Oops":
  example of using oops:
  (human is guessing 120)
  comp: 80?
  user: higher.
  comp: 160?
  user: higher
  comp: 320?
  user: oops
  comp: ok, I'm back at guessing: 160?
  user: lower
  ...


  Revised:
  user chooses 123: 
     randomly choose number between 1 and 19
  comp: 10? 
  user: higher 
     double(10) --> 20
     -- this is where the algorithm is in scaling up mode.  It will double each time they say higher.
     -- guessHigher doubles the value
  comp: 20? 
  user: higher
     double (20) -> 40
  comp: 40?
  user: higher
     double (40) -> 80
  comp: 80?
  user: higher
     double (80) -> 160
     -- guessHigher doubles the value
  comp: 160?
  user: lower
     midpoint (80, 160) -> 120
     -- this is where the algorithm switches to staying within bounds.
     -- guessLower gives midpoint between current guess (160) as upper bound and previous guess (80) as lower bound
  comp: 120?
  user: higher
     midpoint (120, 160) -> 140
     -- guessHigher gives midpoint between current guess (120) as lower bound and previous upper bound (160) as upper bound
  comp: 140?
  user: lower
     midpoint (120, 140) -> 130
     -- guessLower gives midpoint between currentGuess (140) as upper bound and previous lower bound (120) as lower bound
  comp: 130?
  user: lower
     midpoint (120, 130) -> 125
     -- guessLower gives midpoint between current guess (130) as upper bound and previous lower bound (120) as lower bound
  comp: 125?
  user: lower
     midpoint (120, 125) -> 123
     -- guessLower gives midpoint between current guess (125) as upper bound and previous lower bound as lower bound (120)
  comp: 123?
  user: yes

